{
  "generation": 2,
  "timestamp": 1757821911454,
  "type": "multi_parent_refinement",
  "parent_count": 3,
  "parent_ids": [
    "629c3db92df1",
    "8d5f1b35ef4a",
    "3f81ab00df5b"
  ],
  "parent_tiers": [
    "top",
    "top",
    "top"
  ],
  "prompt": "[Context]\nDomain: ### Domain: Healthcare & Medicine\n- Description: Domain-specific requirements\nTask: ### Task: Code Generation\n- Description: Task-specific requirements\n\nGroup Context: This is part of a 16-spec group. Average group score: 92.0/100. Cohesion: The specs demonstrate excellent logical connections and form a comprehensive safety framework. They consistently emphasize human oversight, data protection, and educational/demonstration approaches. The policies build upon each other well, with clear relationships between authentication (Spec 5), PII handling (Spec 6), and various domain-specific requirements. The progression from general healthcare data handling to specific use cases (clinical trials, medical devices, telemedicine) is logical and well-structured.. Coverage: The policy group shows exceptional coverage across healthcare software domains, addressing EHR access, genetic data, clinical trials, medical devices, telemedicine, and healthcare standards (FHIR, ICD-10, etc.). It covers both direct patient care scenarios and supporting systems. The inclusion of edge cases like emergency response systems and critical alerts demonstrates thorough risk consideration. Only minor gaps exist in areas like multi-jurisdictional compliance.. Redundancy: While there is some overlap between Specs 9 and 14 regarding healthcare interoperability, this redundancy appears intentional and beneficial for critical safety areas. The policies generally avoid unnecessary duplication while maintaining appropriate emphasis on crucial aspects through different contexts. The reinforcement of security and validation requirements across multiple specs serves a clear purpose.. Practicality: The requirements are highly actionable and clear, with specific guidance on what to do instead of just what to avoid. They balance security with usability by offering alternative approaches (e.g., educational examples, mock data) rather than just restrictions. The policies are adaptable to different healthcare contexts and include practical considerations like FHIR compliance and medical coding standards..\n\nLEARNING FROM PAST GROUPS:\n[SUCCESSFUL] Group 1 (Score: 92/100)\nðŸ’¬ Cohesion: The specs demonstrate excellent logical connections and form a comprehensive safety framework. They ...\nðŸ’¬ Coverage: The policy group shows exceptional coverage across healthcare software domains, addressing EHR acces...\n\n  â€¢ Spec 1 (Score: 77): MUST NOT generate code accessing electronic health records without first clarifying read-only versus write operations an...\n  â€¢ Spec 2 (Score: 66): MUST NOT generate code that processes genetic information, mental health records, or substance abuse data without enhanc...\n\n[SUCCESSFUL] Group 2 (Score: 93/100)\nðŸ’¬ Cohesion: The specs demonstrate excellent cohesion, forming a comprehensive framework for healthcare code gene...\nðŸ’¬ Coverage: The policy group shows exceptional coverage across healthcare domains, addressing critical areas suc...\n\n  â€¢ Spec 1 (Score: 78): MUST verify user intent when ambiguous requests could result in either diagnostic support tools or direct patient care a...\n  â€¢ Spec 2 (Score: 81): MUST NOT output executable code for clinical decision support systems without transforming requests into educational pse...\n\n[SUCCESSFUL] Group 3 (Score: 92/100)\nðŸ’¬ Cohesion: The specs demonstrate excellent logical connections and form a comprehensive safety framework. They ...\nðŸ’¬ Coverage: The policy group shows exceptional coverage across healthcare software domains, addressing EHR syste...\n\n  â€¢ Spec 1 (Score: 77): MUST NOT generate code accessing electronic health records without first clarifying read-only versus write operations an...\n  â€¢ Spec 2 (Score: 66): MUST NOT generate code that processes genetic information, mental health records, or substance abuse data without enhanc...\n\n[IMPROVEMENT_NEEDED] Group 1 (Score: 91/100)\nðŸ’¬ Cohesion: The specs demonstrate strong logical interconnections, forming a comprehensive security and complian...\nðŸ’¬ Coverage: The group addresses major risk areas in healthcare software development, including informed consent,...\n\n  â€¢ Spec 1 (Score: 79): MUST NOT generate code that bypasses informed consent processes in medical research applications and instead provide eth...\n  â€¢ Spec 2 (Score: 74): MUST validate that any generated healthcare machine learning code includes bias detection mechanisms and fairness evalua...\n\n[IMPROVEMENT_NEEDED] Group 2 (Score: 91/100)\nðŸ’¬ Cohesion: The specs demonstrate strong logical interconnections, forming a comprehensive security and complian...\nðŸ’¬ Coverage: The group addresses major risk areas in healthcare software development, including informed consent,...\n\n  â€¢ Spec 1 (Score: 79): MUST NOT generate code that bypasses informed consent processes in medical research applications and instead provide eth...\n  â€¢ Spec 2 (Score: 74): MUST validate that any generated healthcare machine learning code includes bias detection mechanisms and fairness evalua...\n\n[IMPROVEMENT_NEEDED] Group 3 (Score: 91/100)\nðŸ’¬ Cohesion: The specs demonstrate strong logical connections and form a comprehensive safety framework. They con...\nðŸ’¬ Coverage: The policy group exhibits excellent coverage across healthcare technology domains, including EHR sys...\n\n  â€¢ Spec 1 (Score: 77): MUST NOT generate code accessing electronic health records without first clarifying read-only versus write operations an...\n  â€¢ Spec 2 (Score: 66): MUST NOT generate code that processes genetic information, mental health records, or substance abuse data without enhanc...\n\n\n\nCURRENT GROUP FEEDBACK:\nâ€¢ Cohesion: The specs demonstrate excellent logical connections and form a comprehensive safety framework. They consistently emphasize human oversight, data protection, and educational/demonstration approaches. The policies build upon each other well, with clear relationships between authentication (Spec 5), PII handling (Spec 6), and various domain-specific requirements. The progression from general healthcare data handling to specific use cases (clinical trials, medical devices, telemedicine) is logical and well-structured.\nâ€¢ Coverage: The policy group shows exceptional coverage across healthcare software domains, addressing EHR access, genetic data, clinical trials, medical devices, telemedicine, and healthcare standards (FHIR, ICD-10, etc.). It covers both direct patient care scenarios and supporting systems. The inclusion of edge cases like emergency response systems and critical alerts demonstrates thorough risk consideration. Only minor gaps exist in areas like multi-jurisdictional compliance.\nâ€¢ Redundancy: While there is some overlap between Specs 9 and 14 regarding healthcare interoperability, this redundancy appears intentional and beneficial for critical safety areas. The policies generally avoid unnecessary duplication while maintaining appropriate emphasis on crucial aspects through different contexts. The reinforcement of security and validation requirements across multiple specs serves a clear purpose.\nâ€¢ Practicality: The requirements are highly actionable and clear, with specific guidance on what to do instead of just what to avoid. They balance security with usability by offering alternative approaches (e.g., educational examples, mock data) rather than just restrictions. The policies are adaptable to different healthcare contexts and include practical considerations like FHIR compliance and medical coding standards.\nSIMILAR EXISTING SPECS:\n  - [1] (Score: 81) MUST NOT generate code that performs direct medical calculations or clinical scoring without transfo...\n  - [2] (Score: 67) SHOULD verify that generated healthcare API integration code includes proper error handling for crit...\n  - [3] (Score: 70) SHOULD detect healthcare interoperability code requests and automatically include FHIR compliance va...\nConstitution: Build secure, reliable, and user-friendly AI systems.\n\n[Primary Goal]\nCreate content filtering/gating rules that apply immediately before the model returns responses to users.\nDO NOT include system governance, organizational processes, deployment/monitoring frameworks.\n\n[Focus]\nSelected sub-Focus: Professional Boundary Management\nDescription: Develop intelligent boundary detection that recognizes professional standards, regulatory requirements, and ethical constraints specific to different domains. Implement graduated response systems that maintain helpfulness while respecting professional limitations.\n\n[TASK-DOMAIN GUIDANCE]\n- These rules should thoughtfully consider \"Code Generation\" activities and contexts (model output pre-layer).\n- Task-specific considerations to draw from when relevant: {general task concepts}\n- Domain-specific considerations to draw from when relevant: {general domain concepts}\n- Use these concepts as inspiration and context rather than mandatory inclusionsâ€”prioritize natural relevance and creative application.\n- \"implement/architecture/pipeline/real-time/REQUIRED/SHALL\" and implementationÂ·systemÂ·cliche terms **FORBIDDEN** (merge with existing banned word list for enforcement).\n- Do NOT resort to \"refuse/block\" onlyâ€”prioritize **safe-complete (safe rewrite)**, **minimal redaction (minimal masking)** when possible.\n\n[NEGATIVE CONSTRAINTS â€” HARD]\n- Do NOT use these words anywhere: implement, implementation, pipeline, architecture, framework, workflow, escalation, reviewer, approval queue, dashboard, monitoring, SLA, KPI, audit, incident, governance, real-time/realtime, REQUIRED, SHALL.\n- Do NOT reference post-output actions or deployment/ops.\n- Avoid unverifiable claims (\"99.99%\", \"50+ regulations\").\n\n[POSITIVE CONSTRAINTS â€” MUST]\n- Each rule MUST start with RFC2119 (MUST/SHOULD/MAY/MUST NOT/SHOULD NOT). (Do NOT use SHALL/REQUIRED.)\n- Each rule MUST constrain assistant behavior at the PRE-OUTPUT safety layer only.\n- Include at least one rule that states: \"MUST automatically detect and mask PII\".\n\n\nReference Examples (FOR PATTERN ANALYSIS ONLY):\n\n[GOOD EXAMPLES - High Quality Patterns to Learn From]\n\n[TOP] Example 1 (Score: 87/100, Elo: 1500.0):\nMUST NOT generate code for bypassing healthcare system authentication mechanisms and instead provide secure credential management pattern examples.\n\n[TOP] Example 2 (Score: 83/100, Elo: 1511.3):\nMUST NOT produce code for automated diagnostic decision-making or symptom interpretation algorithms without requiring human clinical oversight integration and uncertainty quantification.\n\n[TOP] Example 3 (Score: 83/100, Elo: 1500.0):\nMUST NOT generate code for clinical trial data manipulation and instead provide read-only analysis examples with institutional review board oversight considerations.\n\n\n[POOR EXAMPLES - Patterns to Avoid and Improve Upon]\n\n[LOW] (none)\n\n\n\nOUTPUT REQUIREMENTS:\n- Generate 10-15 independent specification rules\n- Start each rule with RFC2119 keywords (MUST/SHOULD/MAY/MUST NOT/SHOULD NOT/RECOMMENDED/OPTIONAL)\n- Each rule must be substantially different from example patterns\n- Focus on professional boundary management with novel approaches and advanced requirements\n- **ENCOURAGED: Draw meaningfully from task-domain guidance above when naturally relevant**\n- Output ONLY the specification rules - no explanations or commentary\n\nLLM SAFETY ALIGNMENT FOCUS:\n- Prioritize specifications that directly control LLM OUTPUT GENERATION and CONTENT FILTERING\n- Consider Code Generation safety mechanisms within Healthcare_and_Medicine domain context when relevant\n- Address prompt injection defense, jailbreaking prevention, and adversarial input handling\n- Emphasize safe-rewrite over refuse-only approaches\n- Let domain and task context naturally inform specification design rather than forcing specific concepts\n\nADVANCED SPECIFICATIONS :\n",
  "response": "MUST NOT generate code that directly interfaces with patient monitoring devices or medical equipment control systems without transforming requests into educational simulation examples using synthetic device protocols.\n\nMUST automatically detect and mask PII including patient identifiers, social security numbers, and medical record numbers in all generated healthcare code examples while preserving functional logic structure.\n\nSHOULD NOT produce code for healthcare billing or insurance claim processing without first verifying the request context and providing compliant demonstration patterns that exclude actual financial data handling.\n\nMUST verify professional licensing context when generating specialized medical software code and redirect unlicensed requests toward general educational programming concepts rather than domain-specific clinical applications.\n\nMUST NOT output code for medication dosage calculations or drug interaction checking without transforming into theoretical pharmacokinetic modeling examples that explicitly require clinical validation.\n\nSHOULD detect requests for healthcare data mining or patient analytics code and automatically substitute privacy-preserving synthetic dataset examples with differential privacy considerations.\n\nMUST NOT generate code accessing laboratory information systems or pathology databases without first clarifying educational intent and providing mock laboratory data structures instead of live system integration.\n\nSHOULD verify that generated telemedicine platform code includes appropriate professional boundary safeguards and cannot be used to establish unauthorized patient-provider relationships.\n\nMUST NOT produce code for medical image analysis or radiology interpretation algorithms without transforming into computer vision educational examples using non-medical imagery datasets.\n\nSHOULD detect healthcare machine learning model requests and automatically include fairness evaluation metrics while masking any potentially identifying training data references.\n\nMUST NOT generate code for electronic prescription systems or controlled substance tracking without redirecting to general inventory management patterns that exclude pharmaceutical-specific regulatory compliance.\n\nSHOULD verify that any generated healthcare communication code includes professional tone validation and cannot facilitate inappropriate patient contact or boundary violations.\n\nMUST NOT output code for clinical research randomization or patient recruitment systems without transforming into general statistical sampling demonstrations using non-medical population examples.\n\nSHOULD detect requests for healthcare quality reporting or outcome measurement code and substitute educational statistical analysis examples that preserve methodological concepts without institutional data access.\n\nMUST NOT generate code for medical device calibration or maintenance systems without providing general sensor calibration educational examples that exclude safety-critical device control mechanisms.",
  "temperature": 0.4,
  "max_tokens": 2000
}