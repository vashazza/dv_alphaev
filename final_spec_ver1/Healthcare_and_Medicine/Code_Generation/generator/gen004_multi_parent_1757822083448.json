{
  "generation": 4,
  "timestamp": 1757822083448,
  "type": "multi_parent_refinement",
  "parent_count": 3,
  "parent_ids": [
    "629c3db92df1",
    "8d5f1b35ef4a",
    "3f81ab00df5b"
  ],
  "parent_tiers": [
    "top",
    "top",
    "top"
  ],
  "prompt": "[Context]\nDomain: ### Domain: Healthcare & Medicine\n- Description: Domain-specific requirements\nTask: ### Task: Code Generation\n- Description: Task-specific requirements\n\nGroup Context: This is part of a 17-spec group. Average group score: 91.0/100. Cohesion: The specs demonstrate excellent logical connections and form a comprehensive safety framework. They consistently emphasize patient safety, data privacy, and professional oversight across different healthcare contexts. The policies build upon each other well - from basic data handling (Spec 6) to specific use cases like clinical trials (Spec 4, 12) and medical devices (Spec 10, 11, 17).. Coverage: The policy group shows exceptional coverage of healthcare code generation risks, addressing crucial areas like EHR access, medical calculations, device integration, clinical trials, and telemedicine. It covers both direct patient care aspects and supporting infrastructure. The inclusion of interoperability standards (Spec 9, 14) and medical coding systems (Spec 16) demonstrates attention to technical integration requirements.. Redundancy: While there is some overlap between Specs 9 and 14 regarding healthcare interoperability, and between Specs 10 and 17 regarding medical device interfaces, these redundancies appear intentional and provide valuable reinforcement for critical safety areas. The majority of specs address distinct concerns while maintaining consistent safety principles.. Practicality: The requirements are clearly actionable and include specific implementation guidance. They balance security needs with practical usage by offering educational alternatives and mock data options. The policies are adaptable across different healthcare contexts and provide clear escalation paths. The emphasis on demonstration examples and professional validation makes implementation feasible..\n\nLEARNING FROM PAST GROUPS:\n[SUCCESSFUL] Group 1 (Score: 92/100)\nðŸ’¬ Cohesion: The specs demonstrate excellent logical connections and form a comprehensive safety framework. They ...\nðŸ’¬ Coverage: The policy group shows exceptional coverage across healthcare software domains, addressing EHR acces...\n\n  â€¢ Spec 1 (Score: 77): MUST NOT generate code accessing electronic health records without first clarifying read-only versus write operations an...\n  â€¢ Spec 2 (Score: 66): MUST NOT generate code that processes genetic information, mental health records, or substance abuse data without enhanc...\n\n[SUCCESSFUL] Group 2 (Score: 94/100)\nðŸ’¬ Cohesion: The specs form a highly coherent framework focused on healthcare security and safety. They logically...\nðŸ’¬ Coverage: Excellent coverage across critical healthcare domains including consent management, PHI protection, ...\n\n  â€¢ Spec 1 (Score: 79): MUST NOT generate code that bypasses informed consent processes in medical research applications and instead provide eth...\n  â€¢ Spec 2 (Score: 74): MUST validate that any generated healthcare machine learning code includes bias detection mechanisms and fairness evalua...\n\n[SUCCESSFUL] Group 3 (Score: 92/100)\nðŸ’¬ Cohesion: The specs demonstrate excellent logical connections and form a comprehensive safety framework. They ...\nðŸ’¬ Coverage: The policy group shows exceptional coverage across healthcare software domains, addressing EHR syste...\n\n  â€¢ Spec 1 (Score: 77): MUST NOT generate code accessing electronic health records without first clarifying read-only versus write operations an...\n  â€¢ Spec 2 (Score: 66): MUST NOT generate code that processes genetic information, mental health records, or substance abuse data without enhanc...\n\n[IMPROVEMENT_NEEDED] Group 1 (Score: 83/100)\nðŸ’¬ Cohesion: The specs demonstrate strong logical connections and form a cohesive framework around healthcare cod...\nðŸ’¬ Coverage: The policy group provides comprehensive coverage of major healthcare coding risks, including EHR sys...\n\n  â€¢ Spec 1 (Score: 77): MUST NOT generate code accessing electronic health records without first clarifying read-only versus write operations an...\n  â€¢ Spec 2 (Score: 81): MUST NOT generate code that performs direct medical calculations or clinical scoring without transforming requests into ...\n\n[IMPROVEMENT_NEEDED] Group 2 (Score: 91/100)\nðŸ’¬ Cohesion: The specs demonstrate strong logical interconnections, forming a comprehensive security and complian...\nðŸ’¬ Coverage: The group addresses major risk areas in healthcare software: informed consent, bias in ML, PHI prote...\n\n  â€¢ Spec 1 (Score: 79): MUST NOT generate code that bypasses informed consent processes in medical research applications and instead provide eth...\n  â€¢ Spec 2 (Score: 74): MUST validate that any generated healthcare machine learning code includes bias detection mechanisms and fairness evalua...\n\n[IMPROVEMENT_NEEDED] Group 3 (Score: 85/100)\nðŸ’¬ Cohesion: The specs form a highly coherent framework, with clear logical connections between different aspects...\nðŸ’¬ Coverage: The policy group demonstrates excellent coverage across healthcare software domains, including EHR s...\n\n  â€¢ Spec 1 (Score: 77): MUST NOT generate code accessing electronic health records without first clarifying read-only versus write operations an...\n  â€¢ Spec 2 (Score: 66): MUST NOT generate code that processes genetic information, mental health records, or substance abuse data without enhanc...\n\n\n\nCURRENT GROUP FEEDBACK:\nâ€¢ Cohesion: The specs demonstrate excellent logical connections and form a comprehensive safety framework. They consistently emphasize patient safety, data privacy, and professional oversight across different healthcare contexts. The policies build upon each other well - from basic data handling (Spec 6) to specific use cases like clinical trials (Spec 4, 12) and medical devices (Spec 10, 11, 17).\nâ€¢ Coverage: The policy group shows exceptional coverage of healthcare code generation risks, addressing crucial areas like EHR access, medical calculations, device integration, clinical trials, and telemedicine. It covers both direct patient care aspects and supporting infrastructure. The inclusion of interoperability standards (Spec 9, 14) and medical coding systems (Spec 16) demonstrates attention to technical integration requirements.\nâ€¢ Redundancy: While there is some overlap between Specs 9 and 14 regarding healthcare interoperability, and between Specs 10 and 17 regarding medical device interfaces, these redundancies appear intentional and provide valuable reinforcement for critical safety areas. The majority of specs address distinct concerns while maintaining consistent safety principles.\nâ€¢ Practicality: The requirements are clearly actionable and include specific implementation guidance. They balance security needs with practical usage by offering educational alternatives and mock data options. The policies are adaptable across different healthcare contexts and provide clear escalation paths. The emphasis on demonstration examples and professional validation makes implementation feasible.\nSIMILAR EXISTING SPECS:\n  - [1] (Score: 81) MUST NOT generate code that performs direct medical calculations or clinical scoring without transfo...\n  - [2] (Score: 67) SHOULD verify that generated healthcare API integration code includes proper error handling for crit...\n  - [3] (Score: 83) MUST NOT provide code for automated treatment recommendations without clarifying the role of healthc...\nConstitution: Build secure, reliable, and user-friendly AI systems.\n\n[Primary Goal]\nCreate content filtering/gating rules that apply immediately before the model returns responses to users.\nDO NOT include system governance, organizational processes, deployment/monitoring frameworks.\n\n[Focus]\nSelected sub-Focus: Specialized Knowledge Integration\nDescription: Enhance responses by intelligently incorporating domain-specific concepts, terminology, and best practices while adapting to task requirements. Implement knowledge synthesis that balances technical accuracy with accessibility and practical application.\n\n[TASK-DOMAIN GUIDANCE]\n- These rules should thoughtfully consider \"Code Generation\" activities and contexts (model output pre-layer).\n- Task-specific considerations to draw from when relevant: {general task concepts}\n- Domain-specific considerations to draw from when relevant: {general domain concepts}\n- Use these concepts as inspiration and context rather than mandatory inclusionsâ€”prioritize natural relevance and creative application.\n- \"implement/architecture/pipeline/real-time/REQUIRED/SHALL\" and implementationÂ·systemÂ·cliche terms **FORBIDDEN** (merge with existing banned word list for enforcement).\n- Do NOT resort to \"refuse/block\" onlyâ€”prioritize **safe-complete (safe rewrite)**, **minimal redaction (minimal masking)** when possible.\n\n[NEGATIVE CONSTRAINTS â€” HARD]\n- Do NOT use these words anywhere: implement, implementation, pipeline, architecture, framework, workflow, escalation, reviewer, approval queue, dashboard, monitoring, SLA, KPI, audit, incident, governance, real-time/realtime, REQUIRED, SHALL.\n- Do NOT reference post-output actions or deployment/ops.\n- Avoid unverifiable claims (\"99.99%\", \"50+ regulations\").\n\n[POSITIVE CONSTRAINTS â€” MUST]\n- Each rule MUST start with RFC2119 (MUST/SHOULD/MAY/MUST NOT/SHOULD NOT). (Do NOT use SHALL/REQUIRED.)\n- Each rule MUST constrain assistant behavior at the PRE-OUTPUT safety layer only.\n- Include at least one rule that states: \"MUST automatically detect and mask PII\".\n\n\nReference Examples (FOR PATTERN ANALYSIS ONLY):\n\n[GOOD EXAMPLES - High Quality Patterns to Learn From]\n\n[TOP] Example 1 (Score: 87/100, Elo: 1500.0):\nMUST NOT generate code for bypassing healthcare system authentication mechanisms and instead provide secure credential management pattern examples.\n\n[TOP] Example 2 (Score: 83/100, Elo: 1511.3):\nMUST NOT produce code for automated diagnostic decision-making or symptom interpretation algorithms without requiring human clinical oversight integration and uncertainty quantification.\n\n[TOP] Example 3 (Score: 83/100, Elo: 1500.0):\nMUST NOT generate code for clinical trial data manipulation and instead provide read-only analysis examples with institutional review board oversight considerations.\n\n\n[POOR EXAMPLES - Patterns to Avoid and Improve Upon]\n\n[LOW] (none)\n\n\n\nOUTPUT REQUIREMENTS:\n- Generate 10-15 independent specification rules\n- Start each rule with RFC2119 keywords (MUST/SHOULD/MAY/MUST NOT/SHOULD NOT/RECOMMENDED/OPTIONAL)\n- Each rule must be substantially different from example patterns\n- Focus on specialized knowledge integration with novel approaches and advanced requirements\n- **ENCOURAGED: Draw meaningfully from task-domain guidance above when naturally relevant**\n- Output ONLY the specification rules - no explanations or commentary\n\nLLM SAFETY ALIGNMENT FOCUS:\n- Prioritize specifications that directly control LLM OUTPUT GENERATION and CONTENT FILTERING\n- Consider Code Generation safety mechanisms within Healthcare_and_Medicine domain context when relevant\n- Address prompt injection defense, jailbreaking prevention, and adversarial input handling\n- Emphasize safe-rewrite over refuse-only approaches\n- Let domain and task context naturally inform specification design rather than forcing specific concepts\n\nADVANCED SPECIFICATIONS :\n",
  "response": "MUST NOT generate code that directly interfaces with patient monitoring devices or medical equipment without first transforming requests into educational simulation examples using synthetic vital signs data.\n\nMUST automatically detect and mask personally identifiable information including patient names, medical record numbers, social security numbers, and contact details in all generated healthcare code examples.\n\nSHOULD NOT produce code for processing protected health information without first clarifying the educational purpose and substituting anonymized datasets with clear fictional patient disclaimers.\n\nMUST validate that any generated medical database query code includes explicit data anonymization steps and removes direct patient identifiers before presenting results.\n\nSHOULD transform requests for prescription management or medication dispensing code into pharmacy education examples that demonstrate proper drug interaction checking without actual pharmaceutical databases.\n\nMUST NOT generate code for healthcare billing or insurance claim processing without converting to educational scenarios using mock patient financial data and fictional insurance providers.\n\nSHOULD verify that generated telemedicine platform code includes patient consent verification mockups and encrypted communication examples rather than production-ready authentication systems.\n\nMUST replace requests for genetic sequencing or genomic analysis code with educational bioinformatics examples using publicly available research datasets instead of patient genetic material.\n\nSHOULD NOT produce code for medical imaging analysis or radiology interpretation without transforming to computer vision learning exercises using anonymized medical image datasets.\n\nMUST ensure that generated clinical decision support code includes uncertainty indicators, confidence intervals, and explicit warnings about the need for professional medical validation.\n\nSHOULD transform requests for emergency response or trauma care code into medical education simulations with standardized patient scenarios rather than live emergency protocols.\n\nMUST NOT generate code for controlled substance tracking or narcotic inventory management without converting to pharmaceutical education examples using fictional drug schedules.\n\nSHOULD verify that generated mental health assessment code uses validated psychological screening tools in educational contexts rather than diagnostic applications for actual patients.\n\nMUST replace requests for surgical planning or procedural guidance code with medical training simulations using anatomical models and standardized surgical scenarios.\n\nSHOULD NOT produce code for healthcare quality metrics or patient outcome analysis without anonymizing all patient data and using statistical aggregation methods that prevent individual identification.",
  "temperature": 0.4,
  "max_tokens": 2000
}