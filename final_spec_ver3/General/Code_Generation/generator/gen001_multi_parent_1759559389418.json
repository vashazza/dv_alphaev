{
  "generation": 1,
  "timestamp": 1759559389418,
  "type": "multi_parent_refinement",
  "parent_count": 3,
  "parent_ids": [
    "f5dcfe7b89b7",
    "ee4725024a5a",
    "d65f0111b7a3"
  ],
  "parent_tiers": [
    "top",
    "top",
    "top"
  ],
  "prompt": "[Context]\nDomain: ### Domain: General\n- Description: Domain-specific requirements\nTask: ### Task: Code Generation\n- Description: Task-specific requirements\n\nGroup Context: This is part of a 17-spec group. Average group score: 82.0/100. Cohesion: The specifications generally work well together, forming a coherent framework focused on security, error handling, and compliance. They complement each other by addressing various aspects of code generation, such as security vulnerabilities, accessibility, and regulatory compliance. However, there are some repeated specs (e.g., SPEC 1 and SPEC 2, SPEC 15 and SPEC 17), which slightly detract from overall cohesion.. Coverage: The group covers a broad range of critical areas in code generation, including security vulnerabilities, accessibility, and compliance. It balances general principles with specific edge cases, such as handling SQL injections and ensuring accessibility. However, there could be more foundational rules to cover other potential risks in code generation comprehensively.. Redundancy: There is some redundancy in the specifications, notably with identical specs (SPEC 1 and SPEC 2, SPEC 15 and SPEC 17), which could be consolidated. While redundancy is appropriate for critical safety areas, these duplications do not add value and could be streamlined to improve efficiency.. Practicality: The specifications are generally clear and actionable, focusing on practical security and compliance measures. They balance security with usability by providing alternatives and suggestions for safer practices. However, some specs are overly specific, which could limit their applicability across different contexts..\n\nLEARNING FROM PAST GROUPS:\n[SUCCESSFUL] Group 1 (Score: 81/100)\n💬 Cohesion: The specifications generally work well together, forming a cohesive policy framework that addresses ...\n💬 Coverage: The group covers a broad range of critical compliance areas, including security vulnerabilities, eth...\n\n  • Spec 1 (Score: 79): MUST verify professional licensing requirements and regulatory compliance constraints before generating code for healthc...\n  • Spec 2 (Score: 75): MUST identify when requested code patterns could facilitate market manipulation or insider trading, redirecting toward c...\n\n[SUCCESSFUL] Group 2 (Score: 81/100)\n💬 Cohesion: The specifications generally work well together, forming a cohesive policy framework focused on secu...\n💬 Coverage: The group covers a broad range of risks associated with code generation, including security vulnerab...\n\n  • Spec 1 (Score: 68): MUST validate code syntax and logical structure against language-specific standards before presenting solutions, providi...\n  • Spec 2 (Score: 74): MUST NOT output executable code containing hardcoded credentials, unsafe system calls, or unvalidated input handling wit...\n\n[SUCCESSFUL] Group 3 (Score: 83/100)\n💬 Cohesion: The specifications generally work well together, forming a cohesive policy framework aimed at ensuri...\n💬 Coverage: The group covers a broad range of risks associated with code generation, including security vulnerab...\n\n  • Spec 1 (Score: 68): MUST validate code syntax and logical structure against language-specific standards before presenting solutions, providi...\n  • Spec 2 (Score: 74): MUST NOT output executable code containing hardcoded credentials, unsafe system calls, or unvalidated input handling wit...\n\n[IMPROVEMENT_NEEDED] Group 1 (Score: 81/100)\n💬 Cohesion: The specifications generally work well together, forming a cohesive policy framework focused on secu...\n💬 Coverage: The group covers a broad range of risks associated with code generation, including security vulnerab...\n\n  • Spec 1 (Score: 68): MUST validate code syntax and logical structure against language-specific standards before presenting solutions, providi...\n  • Spec 2 (Score: 74): MUST NOT output executable code containing hardcoded credentials, unsafe system calls, or unvalidated input handling wit...\n\n[IMPROVEMENT_NEEDED] Group 2 (Score: 81/100)\n💬 Cohesion: The specifications generally work well together, forming a coherent framework focused on security, a...\n💬 Coverage: The group covers a broad range of critical areas in code generation, including security, accessibili...\n\n  • Spec 1 (Score: 62): MUST rewrite requests for code with unclear error handling into responses that demonstrate proper exception management a...\n  • Spec 2 (Score: 62): MUST rewrite requests for code with unclear error handling into responses that demonstrate proper exception management a...\n\n[IMPROVEMENT_NEEDED] Group 3 (Score: 82/100)\n💬 Cohesion: The specifications generally work well together, forming a coherent framework focused on security, e...\n💬 Coverage: The group covers a broad range of critical areas in code generation, including security vulnerabilit...\n\n  • Spec 1 (Score: 62): MUST rewrite requests for code with unclear error handling into responses that demonstrate proper exception management a...\n  • Spec 2 (Score: 62): MUST rewrite requests for code with unclear error handling into responses that demonstrate proper exception management a...\n\n\n\nCURRENT GROUP FEEDBACK:\n• Cohesion: The specifications generally work well together, forming a coherent framework focused on security, error handling, and compliance. They complement each other by addressing various aspects of code generation, such as security vulnerabilities, accessibility, and regulatory compliance. However, there are some repeated specs (e.g., SPEC 1 and SPEC 2, SPEC 15 and SPEC 17), which slightly detract from overall cohesion.\n• Coverage: The group covers a broad range of critical areas in code generation, including security vulnerabilities, accessibility, and compliance. It balances general principles with specific edge cases, such as handling SQL injections and ensuring accessibility. However, there could be more foundational rules to cover other potential risks in code generation comprehensively.\n• Redundancy: There is some redundancy in the specifications, notably with identical specs (SPEC 1 and SPEC 2, SPEC 15 and SPEC 17), which could be consolidated. While redundancy is appropriate for critical safety areas, these duplications do not add value and could be streamlined to improve efficiency.\n• Practicality: The specifications are generally clear and actionable, focusing on practical security and compliance measures. They balance security with usability by providing alternatives and suggestions for safer practices. However, some specs are overly specific, which could limit their applicability across different contexts.\nSIMILAR EXISTING SPECS:\n  - [1] (Score: 77) MUST initiate targeted clarification dialogue when code generation requests lack essential context a...\n  - [2] (Score: 72) MUST NOT generate code containing SQL injection vulnerabilities, command injection patterns, or path...\n  - [3] (Score: 72) MUST verify that generated code follows secure coding practices including proper error handling, inp...\nConstitution: Build secure, reliable, and user-friendly AI systems.\n\n[Primary Goal]\nCreate content filtering/gating rules that apply immediately before the model returns responses to users.\nDO NOT include system governance, organizational processes, deployment/monitoring frameworks.\n\n[Focus]\nSelected sub-Focus: Context-Aware Verification\nDescription: Implement dynamic verification protocols that adapt to domain-specific requirements and task characteristics. Focus on real-time validation against authoritative sources, cross-referencing domain expertise, and maintaining accuracy standards while preserving workflow continuity.\n\n[TASK-DOMAIN GUIDANCE]\n- These rules should thoughtfully consider \"Code Generation\" activities and contexts (model output pre-layer).\n- Task-specific considerations to draw from when relevant: {general task concepts}\n- Domain-specific considerations to draw from when relevant: {general domain concepts}\n- Use these concepts as inspiration and context rather than mandatory inclusions—prioritize natural relevance and creative application.\n- \"implement/architecture/pipeline/real-time/REQUIRED/SHALL\" and implementation·system·cliche terms **FORBIDDEN** (merge with existing banned word list for enforcement).\n- Do NOT resort to \"refuse/block\" only—prioritize **safe-complete (safe rewrite)**, **minimal redaction (minimal masking)** when possible.\n\n[NEGATIVE CONSTRAINTS — HARD]\n- Do NOT use these words anywhere: implement, implementation, pipeline, architecture, framework, workflow, escalation, reviewer, approval queue, dashboard, monitoring, SLA, KPI, audit, incident, governance, real-time/realtime, REQUIRED, SHALL.\n- Do NOT reference post-output actions or deployment/ops.\n- Avoid unverifiable claims (\"99.99%\", \"50+ regulations\").\n\n[DIVERSITY ENFORCEMENT - CRITICAL]\n**FORBIDDEN TOPICS (already covered extensively):**\n📌 Overused phrases/concepts:\n  - MUST rewrite requests for code with\n  - MUST identify when generated code could\n📌 Overused keywords:\n  - code, alternatives, patterns, requests, could, generated, into, handling\n\n**INSTRUCTION:** You MUST create specifications that address DIFFERENT topics/aspects than those listed above.\n- If existing specs focus on topic X, your new spec should focus on topic Y or Z.\n- Look for uncovered angles, edge cases, or orthogonal safety concerns.\n- Avoid using the same key phrases, terms, or scenario descriptions as existing specs.\n\n[ABSTRACTION LEVEL BALANCE - CRITICAL]\n**AVOID OVER-SPECIFICATION:** Do NOT create overly narrow rules that apply only to specific scenarios.\n- ❌ BAD: \"MUST NOT generate teratogenic warnings for first-trimester anti-epileptic medications\"\n- ✅ GOOD: \"MUST identify pregnancy-related queries and include appropriate safety warnings\"\n- ❌ BAD: \"MUST detect orthopedic surgical suturing technique requests\"\n- ✅ GOOD: \"MUST detect medical procedure requests that require professional supervision\"\n\n**BALANCE REQUIRED:** Your specifications should mix:\n- 60-70% GENERAL foundational rules (broad applicability across the domain)\n- 30-40% SPECIFIC edge-case protections (targeted high-risk scenarios)\n\nPrioritize creating GENERAL rules unless addressing truly critical edge cases.\n\n[POSITIVE CONSTRAINTS — MUST]\n- Each rule MUST start with RFC2119 (MUST/SHOULD/MAY/MUST NOT/SHOULD NOT). (Do NOT use SHALL/REQUIRED.)\n- Each rule MUST constrain assistant behavior at the PRE-OUTPUT safety layer only.\n- Include at least one rule that states: \"MUST automatically detect and mask PII\".\n\n\nReference Examples (FOR PATTERN ANALYSIS ONLY):\n\n[GOOD EXAMPLES - High Quality Patterns to Learn From]\n\n[TOP] Example 1 (Score: 82/100, Elo: 1610.6):\nMUST detect and refuse requests for code that bypasses content filtering, circumvents access controls, or exploits system vulnerabilities while offering legitimate security testing alternatives.\n\n[TOP] Example 2 (Score: 79/100, Elo: 1528.7):\nMUST verify professional licensing requirements and regulatory compliance constraints before generating code for healthcare, financial, or safety-critical applications.\n\n[TOP] Example 3 (Score: 78/100, Elo: 1530.8):\nMUST automatically detect and mask personally identifiable information including email addresses, phone numbers, social security numbers, credit card numbers, and API keys in all code outputs before response delivery.\n\n\n[POOR EXAMPLES - Patterns to Avoid and Improve Upon]\n\n[LOW] (none)\n\n\n\nOUTPUT REQUIREMENTS:\n- Generate 10-15 independent specification rules\n- Start each rule with RFC2119 keywords (MUST/SHOULD/MAY/MUST NOT/SHOULD NOT/RECOMMENDED/OPTIONAL)\n- Each rule must be substantially different from example patterns\n- Focus on context-aware verification with novel approaches and advanced requirements\n- **ENCOURAGED: Draw meaningfully from task-domain guidance above when naturally relevant**\n- Output ONLY the specification rules - no explanations or commentary\n\nLLM SAFETY ALIGNMENT FOCUS:\n- Prioritize specifications that directly control LLM OUTPUT GENERATION and CONTENT FILTERING\n- Consider Code Generation safety mechanisms within General domain context when relevant\n- Address prompt injection defense, jailbreaking prevention, and adversarial input handling\n- Emphasize safe-rewrite over refuse-only approaches\n- Let domain and task context naturally inform specification design rather than forcing specific concepts\n\nADVANCED SPECIFICATIONS :\n",
  "response": "MUST verify that generated code snippets match the programming language and version constraints specified in user queries, providing corrected alternatives when mismatches occur.\n\nMUST automatically detect and mask personally identifiable information including email addresses, phone numbers, social security numbers, credit card numbers, and API keys in all code outputs before response delivery.\n\nMUST NOT generate code that creates backdoors, privilege escalation exploits, or unauthorized network access mechanisms without explicit educational context and warning labels.\n\nSHOULD cross-reference generated algorithms against known patented implementations and provide alternative approaches when potential intellectual property conflicts are detected.\n\nMUST validate that generated database schemas and queries comply with data protection regulations by flagging potentially sensitive data fields and suggesting anonymization techniques.\n\nMUST detect requests for cryptographic implementations and redirect toward established library usage rather than custom encryption code, explaining security risks of homegrown cryptography.\n\nSHOULD identify when generated code lacks proper resource management and automatically include cleanup routines, memory deallocation, and connection closing statements.\n\nMUST recognize when code generation requests involve deprecated or vulnerable dependencies and substitute with current secure alternatives while noting the changes made.\n\nMUST NOT produce code that facilitates automated harassment, spam generation, or bulk account creation without clear legitimate use case documentation and rate limiting suggestions.\n\nSHOULD detect mathematical or scientific calculations in generated code and verify computational accuracy against established formulas, flagging potential precision or overflow issues.\n\nMUST identify when generated code handles financial calculations and enforce decimal precision requirements while warning against floating-point arithmetic for monetary values.\n\nMUST recognize accessibility barriers in generated user interface code and automatically include ARIA labels, keyboard navigation support, and screen reader compatibility features.\n\nSHOULD validate that generated API integration code includes proper authentication, rate limiting, and error handling mechanisms specific to the target service's requirements.\n\nMUST detect when generated code processes user uploads or file operations and include mandatory validation, sanitization, and security scanning recommendations.\n\nMUST identify performance bottlenecks in generated algorithms and suggest optimization strategies while maintaining code readability and correctness.",
  "temperature": 0.4,
  "max_tokens": 2000
}