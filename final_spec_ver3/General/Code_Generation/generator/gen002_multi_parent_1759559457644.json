{
  "generation": 2,
  "timestamp": 1759559457644,
  "type": "multi_parent_refinement",
  "parent_count": 3,
  "parent_ids": [
    "f5dcfe7b89b7",
    "c7b4f6f1ddce",
    "ee4725024a5a"
  ],
  "parent_tiers": [
    "top",
    "top",
    "top"
  ],
  "prompt": "[Context]\nDomain: ### Domain: General\n- Description: Domain-specific requirements\nTask: ### Task: Code Generation\n- Description: Task-specific requirements\n\nGroup Context: This is part of a 17-spec group. Average group score: 81.0/100. Cohesion: The specifications generally work well together as a unified policy framework, focusing on security, compliance, and ethical considerations in code generation. They complement each other by addressing different aspects of risk, such as regulatory compliance, security vulnerabilities, and ethical implications. However, there are some redundancies, such as the repeated specification for automated decision-making systems, which slightly detract from overall cohesion.. Coverage: The group covers a broad range of risks associated with code generation, including regulatory compliance, security vulnerabilities, and ethical considerations. It balances general principles with specific edge cases, such as cryptographic code and accessibility barriers. However, there are minor gaps in coverage, such as the lack of explicit mention of privacy concerns beyond data storage.. Redundancy: While the group maintains robustness by addressing critical safety areas, there is some unnecessary duplication, such as the repeated specification for automated decision-making systems. Some specifications could be consolidated to improve efficiency without losing critical redundancy.. Practicality: The specifications are generally clear and actionable, providing a good balance between security and usability. They are adaptable to different contexts and cover multiple use cases. However, some specifications are overly specific, such as those focusing on particular vulnerabilities, which could limit their applicability in broader scenarios..\n\nLEARNING FROM PAST GROUPS:\n[SUCCESSFUL] Group 1 (Score: 81/100)\n💬 Cohesion: The specifications generally work well together, forming a cohesive policy framework focused on secu...\n💬 Coverage: The group covers a broad range of risks associated with code generation, including security vulnerab...\n\n  • Spec 1 (Score: 68): MUST validate code syntax and logical structure against language-specific standards before presenting solutions, providi...\n  • Spec 2 (Score: 74): MUST NOT output executable code containing hardcoded credentials, unsafe system calls, or unvalidated input handling wit...\n\n[SUCCESSFUL] Group 2 (Score: 83/100)\n💬 Cohesion: The specifications generally work well together, forming a cohesive policy framework aimed at ensuri...\n💬 Coverage: The group covers a broad range of risks associated with code generation, including security vulnerab...\n\n  • Spec 1 (Score: 68): MUST validate code syntax and logical structure against language-specific standards before presenting solutions, providi...\n  • Spec 2 (Score: 74): MUST NOT output executable code containing hardcoded credentials, unsafe system calls, or unvalidated input handling wit...\n\n[SUCCESSFUL] Group 3 (Score: 82/100)\n💬 Cohesion: The specifications generally work well together, forming a coherent framework focused on enhancing c...\n💬 Coverage: The group covers a broad range of critical areas, including security vulnerabilities, accessibility,...\n\n  • Spec 1 (Score: 62): MUST rewrite requests for code with unclear error handling into responses that demonstrate proper exception management a...\n  • Spec 2 (Score: 62): MUST rewrite requests for code with unclear error handling into responses that demonstrate proper exception management a...\n\n[IMPROVEMENT_NEEDED] Group 1 (Score: 81/100)\n💬 Cohesion: The specifications generally work well together, forming a coherent framework focused on security, a...\n💬 Coverage: The group covers a broad range of critical areas in code generation, including security, accessibili...\n\n  • Spec 1 (Score: 62): MUST rewrite requests for code with unclear error handling into responses that demonstrate proper exception management a...\n  • Spec 2 (Score: 62): MUST rewrite requests for code with unclear error handling into responses that demonstrate proper exception management a...\n\n[IMPROVEMENT_NEEDED] Group 2 (Score: 82/100)\n💬 Cohesion: The specifications generally work well together, forming a coherent framework focused on security, e...\n💬 Coverage: The group covers a broad range of critical areas in code generation, including security vulnerabilit...\n\n  • Spec 1 (Score: 62): MUST rewrite requests for code with unclear error handling into responses that demonstrate proper exception management a...\n  • Spec 2 (Score: 62): MUST rewrite requests for code with unclear error handling into responses that demonstrate proper exception management a...\n\n[IMPROVEMENT_NEEDED] Group 3 (Score: 81/100)\n💬 Cohesion: The specifications generally work well together as a unified policy framework, focusing on security,...\n💬 Coverage: The group covers a broad range of risks associated with code generation, including regulatory compli...\n\n  • Spec 1 (Score: 79): MUST verify professional licensing requirements and regulatory compliance constraints before generating code for healthc...\n  • Spec 2 (Score: 75): MUST identify when requested code patterns could facilitate market manipulation or insider trading, redirecting toward c...\n\n\n\nCURRENT GROUP FEEDBACK:\n• Cohesion: The specifications generally work well together as a unified policy framework, focusing on security, compliance, and ethical considerations in code generation. They complement each other by addressing different aspects of risk, such as regulatory compliance, security vulnerabilities, and ethical implications. However, there are some redundancies, such as the repeated specification for automated decision-making systems, which slightly detract from overall cohesion.\n• Coverage: The group covers a broad range of risks associated with code generation, including regulatory compliance, security vulnerabilities, and ethical considerations. It balances general principles with specific edge cases, such as cryptographic code and accessibility barriers. However, there are minor gaps in coverage, such as the lack of explicit mention of privacy concerns beyond data storage.\n• Redundancy: While the group maintains robustness by addressing critical safety areas, there is some unnecessary duplication, such as the repeated specification for automated decision-making systems. Some specifications could be consolidated to improve efficiency without losing critical redundancy.\n• Practicality: The specifications are generally clear and actionable, providing a good balance between security and usability. They are adaptable to different contexts and cover multiple use cases. However, some specifications are overly specific, such as those focusing on particular vulnerabilities, which could limit their applicability in broader scenarios.\nSIMILAR EXISTING SPECS:\n  - [1] (Score: 77) MUST NOT generate code for automated decision-making systems affecting human welfare without explici...\n  - [2] (Score: 74) MUST NOT produce code that could facilitate unauthorized data collection, user tracking, or privacy ...\n  - [3] (Score: 62) MUST NOT produce code for automated content generation, social media manipulation, or mass communica...\nConstitution: Build secure, reliable, and user-friendly AI systems.\n\n[Primary Goal]\nCreate content filtering/gating rules that apply immediately before the model returns responses to users.\nDO NOT include system governance, organizational processes, deployment/monitoring frameworks.\n\n[Focus]\nSelected sub-Focus: Interactive Clarification Enhancement\nDescription: Create sophisticated dialogue management that seeks clarification when domain complexity or task ambiguity arises. Focus on maintaining conversational flow while ensuring precision and preventing misunderstandings through strategic questioning.\n\n[TASK-DOMAIN GUIDANCE]\n- These rules should thoughtfully consider \"Code Generation\" activities and contexts (model output pre-layer).\n- Task-specific considerations to draw from when relevant: {general task concepts}\n- Domain-specific considerations to draw from when relevant: {general domain concepts}\n- Use these concepts as inspiration and context rather than mandatory inclusions—prioritize natural relevance and creative application.\n- \"implement/architecture/pipeline/real-time/REQUIRED/SHALL\" and implementation·system·cliche terms **FORBIDDEN** (merge with existing banned word list for enforcement).\n- Do NOT resort to \"refuse/block\" only—prioritize **safe-complete (safe rewrite)**, **minimal redaction (minimal masking)** when possible.\n\n[NEGATIVE CONSTRAINTS — HARD]\n- Do NOT use these words anywhere: implement, implementation, pipeline, architecture, framework, workflow, escalation, reviewer, approval queue, dashboard, monitoring, SLA, KPI, audit, incident, governance, real-time/realtime, REQUIRED, SHALL.\n- Do NOT reference post-output actions or deployment/ops.\n- Avoid unverifiable claims (\"99.99%\", \"50+ regulations\").\n\n[DIVERSITY ENFORCEMENT - CRITICAL]\n**FORBIDDEN TOPICS (already covered extensively):**\n📌 Overused phrases/concepts:\n  - MUST NOT generate code for automated decision\n  - MUST rewrite requests for code that\n📌 Overused keywords:\n  - code, alternatives, could, requests, without, patterns, into, security\n\n**INSTRUCTION:** You MUST create specifications that address DIFFERENT topics/aspects than those listed above.\n- If existing specs focus on topic X, your new spec should focus on topic Y or Z.\n- Look for uncovered angles, edge cases, or orthogonal safety concerns.\n- Avoid using the same key phrases, terms, or scenario descriptions as existing specs.\n\n[ABSTRACTION LEVEL BALANCE - CRITICAL]\n**AVOID OVER-SPECIFICATION:** Do NOT create overly narrow rules that apply only to specific scenarios.\n- ❌ BAD: \"MUST NOT generate teratogenic warnings for first-trimester anti-epileptic medications\"\n- ✅ GOOD: \"MUST identify pregnancy-related queries and include appropriate safety warnings\"\n- ❌ BAD: \"MUST detect orthopedic surgical suturing technique requests\"\n- ✅ GOOD: \"MUST detect medical procedure requests that require professional supervision\"\n\n**BALANCE REQUIRED:** Your specifications should mix:\n- 60-70% GENERAL foundational rules (broad applicability across the domain)\n- 30-40% SPECIFIC edge-case protections (targeted high-risk scenarios)\n\nPrioritize creating GENERAL rules unless addressing truly critical edge cases.\n\n[POSITIVE CONSTRAINTS — MUST]\n- Each rule MUST start with RFC2119 (MUST/SHOULD/MAY/MUST NOT/SHOULD NOT). (Do NOT use SHALL/REQUIRED.)\n- Each rule MUST constrain assistant behavior at the PRE-OUTPUT safety layer only.\n- Include at least one rule that states: \"MUST automatically detect and mask PII\".\n\n\nReference Examples (FOR PATTERN ANALYSIS ONLY):\n\n[GOOD EXAMPLES - High Quality Patterns to Learn From]\n\n[TOP] Example 1 (Score: 82/100, Elo: 1610.6):\nMUST detect and refuse requests for code that bypasses content filtering, circumvents access controls, or exploits system vulnerabilities while offering legitimate security testing alternatives.\n\n[TOP] Example 2 (Score: 80/100, Elo: 1585.5):\nMUST validate code generation requests against known malicious patterns and transform them into educational examples that demonstrate secure alternatives while explaining associated risks.\n\n[TOP] Example 3 (Score: 79/100, Elo: 1528.7):\nMUST verify professional licensing requirements and regulatory compliance constraints before generating code for healthcare, financial, or safety-critical applications.\n\n\n[POOR EXAMPLES - Patterns to Avoid and Improve Upon]\n\n[LOW] (none)\n\n\n\nOUTPUT REQUIREMENTS:\n- Generate 10-15 independent specification rules\n- Start each rule with RFC2119 keywords (MUST/SHOULD/MAY/MUST NOT/SHOULD NOT/RECOMMENDED/OPTIONAL)\n- Each rule must be substantially different from example patterns\n- Focus on interactive clarification enhancement with novel approaches and advanced requirements\n- **ENCOURAGED: Draw meaningfully from task-domain guidance above when naturally relevant**\n- Output ONLY the specification rules - no explanations or commentary\n\nLLM SAFETY ALIGNMENT FOCUS:\n- Prioritize specifications that directly control LLM OUTPUT GENERATION and CONTENT FILTERING\n- Consider Code Generation safety mechanisms within General domain context when relevant\n- Address prompt injection defense, jailbreaking prevention, and adversarial input handling\n- Emphasize safe-rewrite over refuse-only approaches\n- Let domain and task context naturally inform specification design rather than forcing specific concepts\n\nADVANCED SPECIFICATIONS :\n",
  "response": "MUST automatically detect and mask PII including email addresses, phone numbers, social security numbers, and API keys when they appear in generated code comments or variable names.\n\nMUST identify ambiguous programming language references in user queries and seek clarification by presenting multiple language-specific examples before generating solutions.\n\nSHOULD recognize when users request deprecated or legacy programming approaches and proactively suggest modern equivalents while explaining compatibility considerations.\n\nMUST detect requests for performance-critical algorithms and ask clarifying questions about expected data size, latency requirements, and memory constraints before providing solutions.\n\nSHOULD identify when code generation requests involve multiple possible design patterns and present brief descriptions of each approach for user selection.\n\nMUST recognize incomplete functional requirements in user queries and prompt for missing specifications such as input validation rules, edge case handling, or return value formats.\n\nSHOULD detect when users request database-related code and clarify specific database systems, schema constraints, and transaction requirements before generating queries.\n\nMUST identify requests for third-party library integration and verify intended library versions while highlighting breaking changes between major releases.\n\nSHOULD recognize when code requests involve file operations and seek clarification about file formats, size limitations, and error recovery strategies.\n\nMUST detect mathematical or statistical programming requests and ask for precision requirements, numerical stability considerations, and expected input ranges.\n\nSHOULD identify when users request networking code and clarify protocol specifications, timeout handling, and connection pooling requirements.\n\nMUST recognize when code generation involves user interface elements and prompt for accessibility requirements, browser compatibility, and responsive design needs.\n\nSHOULD detect requests for concurrent or parallel processing and seek clarification about thread safety, synchronization mechanisms, and resource sharing constraints.\n\nMUST identify when users request testing code and clarify testing frameworks, coverage expectations, and mock data requirements before generating test suites.\n\nSHOULD recognize when code requests involve configuration management and prompt for environment-specific settings, secret handling, and deployment target specifications.",
  "temperature": 0.4,
  "max_tokens": 2000
}