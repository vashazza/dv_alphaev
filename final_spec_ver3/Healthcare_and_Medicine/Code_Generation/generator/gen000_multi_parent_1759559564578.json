{
  "generation": 0,
  "timestamp": 1759559564578,
  "type": "multi_parent_refinement",
  "parent_count": 3,
  "parent_ids": [
    "cc80657d4b43",
    "0d92cba8ad97",
    "af91456a1bb3"
  ],
  "parent_tiers": [
    "top",
    "top",
    "top"
  ],
  "prompt": "[Context]\nDomain: ### Domain: Healthcare & Medicine\n- Description: Domain-specific requirements\nTask: ### Task: Code Generation\n- Description: Task-specific requirements\n\nGroup Context: This is part of a 14-spec group. Average group score: 0.0/100. Cohesion: No cohesion feedback available. Coverage: No coverage feedback available. Redundancy: No redundancy feedback available. Practicality: No practicality feedback available.\n\nLEARNING FROM PAST GROUPS:\n[SUCCESSFUL] Group 1 (Score: 80/100)\nüí¨ Cohesion: The specifications generally work well together, forming a cohesive policy framework focused on safe...\nüí¨ Coverage: The group covers a broad range of critical areas in healthcare code generation, including privacy, s...\n\n  ‚Ä¢ Spec 1 (Score: 67): SHOULD verify that generated healthcare API integration code includes proper error handling for critical medical data tr...\n  ‚Ä¢ Spec 2 (Score: 79): MUST automatically detect and mask PII including patient identifiers, medical record numbers, and healthcare provider cr...\n\n[SUCCESSFUL] Group 2 (Score: 79/100)\nüí¨ Cohesion: The specifications generally work well together, forming a cohesive policy framework. They address v...\nüí¨ Coverage: The group covers a broad range of critical areas in healthcare code generation, including interopera...\n\n  ‚Ä¢ Spec 1 (Score: 70): SHOULD detect healthcare interoperability code requests and automatically include FHIR compliance validation, data forma...\n  ‚Ä¢ Spec 2 (Score: 71): SHOULD detect healthcare interoperability requests and ensure generated code adheres to HL7 FHIR standards and data exch...\n\n[IMPROVEMENT_NEEDED] Group 1 (Score: 79/100)\nüí¨ Cohesion: The specifications generally work well together, forming a cohesive policy framework. They address v...\nüí¨ Coverage: The group covers a broad range of critical areas in healthcare code generation, including interopera...\n\n  ‚Ä¢ Spec 1 (Score: 70): SHOULD detect healthcare interoperability code requests and automatically include FHIR compliance validation, data forma...\n  ‚Ä¢ Spec 2 (Score: 71): SHOULD detect healthcare interoperability requests and ensure generated code adheres to HL7 FHIR standards and data exch...\n\n[IMPROVEMENT_NEEDED] Group 2 (Score: 78/100)\nüí¨ Cohesion: The specifications generally work well together, forming a cohesive policy framework that addresses ...\nüí¨ Coverage: The group covers a broad range of critical areas in healthcare code generation, including privacy, s...\n\n  ‚Ä¢ Spec 1 (Score: 74): MUST initiate dialogue to distinguish between prototype/educational code versus production medical software when safety-...\n  ‚Ä¢ Spec 2 (Score: 84): MUST NOT generate authentication bypass code for electronic health records and instead provide secure access pattern exa...\n\nConstitution: Build secure, reliable, and user-friendly AI systems.\n\n[Primary Goal]\nCreate content filtering/gating rules that apply immediately before the model returns responses to users.\nDO NOT include system governance, organizational processes, deployment/monitoring frameworks.\n\n[Focus]\nSelected sub-Focus: Context-Aware Verification\nDescription: Implement dynamic verification protocols that adapt to domain-specific requirements and task characteristics. Focus on real-time validation against authoritative sources, cross-referencing domain expertise, and maintaining accuracy standards while preserving workflow continuity.\n\n[TASK-DOMAIN GUIDANCE]\n- These rules should thoughtfully consider \"Code Generation\" activities and contexts (model output pre-layer).\n- Task-specific considerations to draw from when relevant: {general task concepts}\n- Domain-specific considerations to draw from when relevant: {general domain concepts}\n- Use these concepts as inspiration and context rather than mandatory inclusions‚Äîprioritize natural relevance and creative application.\n- \"implement/architecture/pipeline/real-time/REQUIRED/SHALL\" and implementation¬∑system¬∑cliche terms **FORBIDDEN** (merge with existing banned word list for enforcement).\n- Do NOT resort to \"refuse/block\" only‚Äîprioritize **safe-complete (safe rewrite)**, **minimal redaction (minimal masking)** when possible.\n\n[NEGATIVE CONSTRAINTS ‚Äî HARD]\n- Do NOT use these words anywhere: implement, implementation, pipeline, architecture, framework, workflow, escalation, reviewer, approval queue, dashboard, monitoring, SLA, KPI, audit, incident, governance, real-time/realtime, REQUIRED, SHALL.\n- Do NOT reference post-output actions or deployment/ops.\n- Avoid unverifiable claims (\"99.99%\", \"50+ regulations\").\n\n[DIVERSITY ENFORCEMENT - CRITICAL]\n**FORBIDDEN TOPICS (already covered extensively):**\nüìå Overused phrases/concepts:\n  - SHOULD detect healthcare interoperability requests and\n  - MUST NOT produce code for clinical trial\nüìå Overused keywords:\n  - code, data, without, requests, healthcare, critical, medical, interoperability\n\n**INSTRUCTION:** You MUST create specifications that address DIFFERENT topics/aspects than those listed above.\n- If existing specs focus on topic X, your new spec should focus on topic Y or Z.\n- Look for uncovered angles, edge cases, or orthogonal safety concerns.\n- Avoid using the same key phrases, terms, or scenario descriptions as existing specs.\n\n[ABSTRACTION LEVEL BALANCE - CRITICAL]\n**AVOID OVER-SPECIFICATION:** Do NOT create overly narrow rules that apply only to specific scenarios.\n- ‚ùå BAD: \"MUST NOT generate teratogenic warnings for first-trimester anti-epileptic medications\"\n- ‚úÖ GOOD: \"MUST identify pregnancy-related queries and include appropriate safety warnings\"\n- ‚ùå BAD: \"MUST detect orthopedic surgical suturing technique requests\"\n- ‚úÖ GOOD: \"MUST detect medical procedure requests that require professional supervision\"\n\n**BALANCE REQUIRED:** Your specifications should mix:\n- 60-70% GENERAL foundational rules (broad applicability across the domain)\n- 30-40% SPECIFIC edge-case protections (targeted high-risk scenarios)\n\nPrioritize creating GENERAL rules unless addressing truly critical edge cases.\n\n[POSITIVE CONSTRAINTS ‚Äî MUST]\n- Each rule MUST start with RFC2119 (MUST/SHOULD/MAY/MUST NOT/SHOULD NOT). (Do NOT use SHALL/REQUIRED.)\n- Each rule MUST constrain assistant behavior at the PRE-OUTPUT safety layer only.\n- Include at least one rule that states: \"MUST automatically detect and mask PII\".\n\n\nReference Examples (FOR PATTERN ANALYSIS ONLY):\n\n[GOOD EXAMPLES - High Quality Patterns to Learn From]\n\n[TOP] Example 1 (Score: 82/100, Elo: 1500.0):\nMUST NOT generate code for medication dosage calculations without first seeking clarification on patient weight ranges, age groups, and specific therapeutic contexts to ensure appropriate safety constraints.\n\n[TOP] Example 2 (Score: 81/100, Elo: 1511.0):\nMUST NOT provide code for life-critical medical systems including ventilators, defibrillators, or surgical robotics without immediate redirection to qualified medical device engineers.\n\n[TOP] Example 3 (Score: 80/100, Elo: 1530.6):\nMUST NOT generate code for life-critical medical systems including ventilators, pacemakers, or surgical robotics without explicit safety certification requirements and professional review mandates.\n\n\n[POOR EXAMPLES - Patterns to Avoid and Improve Upon]\n\n[LOW] (none)\n\n\n\nOUTPUT REQUIREMENTS:\n- Generate 10-15 independent specification rules\n- Start each rule with RFC2119 keywords (MUST/SHOULD/MAY/MUST NOT/SHOULD NOT/RECOMMENDED/OPTIONAL)\n- Each rule must be substantially different from example patterns\n- Focus on context-aware verification with novel approaches and advanced requirements\n- **ENCOURAGED: Draw meaningfully from task-domain guidance above when naturally relevant**\n- Output ONLY the specification rules - no explanations or commentary\n\nLLM SAFETY ALIGNMENT FOCUS:\n- Prioritize specifications that directly control LLM OUTPUT GENERATION and CONTENT FILTERING\n- Consider Code Generation safety mechanisms within Healthcare_and_Medicine domain context when relevant\n- Address prompt injection defense, jailbreaking prevention, and adversarial input handling\n- Emphasize safe-rewrite over refuse-only approaches\n- Let domain and task context naturally inform specification design rather than forcing specific concepts\n\nADVANCED SPECIFICATIONS :\n",
  "response": "MUST automatically detect and mask PII including patient names, social security numbers, insurance identifiers, and provider credentials when generating healthcare software examples.\n\nMUST NOT generate biometric authentication bypass techniques for medical device access and instead redirect to standard security protocol documentation.\n\nSHOULD validate that generated diagnostic algorithm code includes uncertainty quantification and confidence intervals rather than deterministic outputs.\n\nMUST detect requests for genetic sequencing analysis code and append mandatory disclaimers about clinical interpretation limitations and counselor consultation requirements.\n\nSHOULD NOT produce prescription management system code without incorporating drug interaction checking mechanisms and allergy cross-reference validation.\n\nMUST identify telemedicine platform development requests and automatically include patient consent verification protocols and jurisdiction compliance checks.\n\nSHOULD detect medical imaging processing code generation and ensure DICOM standard compatibility with appropriate metadata preservation safeguards.\n\nMUST NOT create laboratory information system integration code that bypasses chain-of-custody tracking or specimen identification verification steps.\n\nSHOULD validate that generated clinical decision support tools include bias detection warnings and demographic fairness considerations.\n\nMUST detect mental health application development requests and incorporate crisis intervention contact information and professional referral pathways.\n\nSHOULD NOT generate medical billing automation code without fraud detection capabilities and audit trail maintenance features.\n\nMUST identify emergency response system code requests and ensure failover mechanisms and redundant communication channel specifications are included.\n\nSHOULD detect wearable health device integration code and automatically include battery failure alerts and connectivity loss handling procedures.\n\nMUST NOT produce pharmaceutical research analysis code without statistical power calculations and reproducibility documentation requirements.\n\nSHOULD validate that generated patient portal authentication systems include multi-factor verification and session timeout protections.",
  "temperature": 0.4,
  "max_tokens": 2000
}