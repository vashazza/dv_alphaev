{
  "generation": 3,
  "timestamp": 1759499016086,
  "type": "multi_parent_refinement",
  "parent_count": 3,
  "parent_ids": [
    "cc80657d4b43",
    "cc80657d4b43",
    "2593d5f5e5d6"
  ],
  "parent_tiers": [
    "top",
    "top",
    "top"
  ],
  "prompt": "[Context]\nDomain: ### Domain: Healthcare & Medicine\n- Description: Domain-specific requirements\nTask: ### Task: Code Generation\n- Description: Task-specific requirements\n\nGroup Context: This is part of a 16-spec group. Average group score: 0.0/100. Cohesion: No cohesion feedback available. Coverage: No coverage feedback available. Redundancy: No redundancy feedback available. Practicality: No practicality feedback available.\n\nLEARNING FROM PAST GROUPS:\n[SUCCESSFUL] Group 1 (Score: 78/100)\nüí¨ Cohesion: The specifications generally work well together, forming a cohesive policy framework that emphasizes...\nüí¨ Coverage: The group covers a broad range of critical areas in healthcare code generation, including interopera...\n\n  ‚Ä¢ Spec 1 (Score: 70): SHOULD detect healthcare interoperability code requests and automatically include FHIR compliance validation, data forma...\n  ‚Ä¢ Spec 2 (Score: N/A): MUST automatically detect ambiguous medical terminology in user queries and request clarification between clinical versu...\n\n[SUCCESSFUL] Group 2 (Score: 82/100)\nüí¨ Cohesion: The specifications generally work well together as a unified policy framework. They collectively add...\nüí¨ Coverage: The group covers a broad range of critical areas in healthcare code generation, including privacy, s...\n\n  ‚Ä¢ Spec 1 (Score: 66): MUST NOT generate code that processes genetic information, mental health records, or substance abuse data without enhanc...\n  ‚Ä¢ Spec 2 (Score: 81): MUST validate that any telemedicine or remote monitoring code examples include proper security protocols, data transmiss...\n\n[SUCCESSFUL] Group 3 (Score: 79/100)\nüí¨ Cohesion: The specifications generally work well together, forming a coherent policy framework that emphasizes...\nüí¨ Coverage: The group covers a broad range of critical areas in healthcare code generation, including privacy, s...\n\n  ‚Ä¢ Spec 1 (Score: 66): MUST NOT generate code that processes genetic information, mental health records, or substance abuse data without enhanc...\n  ‚Ä¢ Spec 2 (Score: 81): MUST validate that any telemedicine or remote monitoring code examples include proper security protocols, data transmiss...\n\n[IMPROVEMENT_NEEDED] Group 1 (Score: 75/100)\nüí¨ Cohesion: The specs generally work well together, focusing on security, privacy, and compliance in healthcare ...\nüí¨ Coverage: The group covers a broad range of critical areas in healthcare code generation, including interopera...\n\n  ‚Ä¢ Spec 1 (Score: 70): SHOULD detect healthcare interoperability code requests and automatically include FHIR compliance validation, data forma...\n  ‚Ä¢ Spec 2 (Score: 84): MUST NOT generate authentication bypass code for electronic health records and instead provide secure access pattern exa...\n\n[IMPROVEMENT_NEEDED] Group 2 (Score: 76/100)\nüí¨ Cohesion: The specifications generally work well together, forming a cohesive policy framework that addresses ...\nüí¨ Coverage: The group covers a broad range of critical areas in healthcare code generation, including privacy, s...\n\n  ‚Ä¢ Spec 1 (Score: 70): SHOULD detect healthcare interoperability code requests and automatically include FHIR compliance validation, data forma...\n  ‚Ä¢ Spec 2 (Score: 79): MUST validate that generated telemedicine or remote monitoring code includes proper consent management, data encryption,...\n\n[IMPROVEMENT_NEEDED] Group 3 (Score: 68/100)\nüí¨ Cohesion: The specifications generally work well together, focusing on security, privacy, and safety in health...\nüí¨ Coverage: The group covers several critical areas, including authentication, privacy, and dosage calculations,...\n\n  ‚Ä¢ Spec 1 (Score: 84): MUST NOT generate authentication bypass code for electronic health records and instead provide secure access pattern exa...\n  ‚Ä¢ Spec 2 (Score: 79): MUST validate that generated telemedicine or remote monitoring code includes proper consent management, data encryption,...\n\nConstitution: Build secure, reliable, and user-friendly AI systems.\n\n[Primary Goal]\nCreate content filtering/gating rules that apply immediately before the model returns responses to users.\nDO NOT include system governance, organizational processes, deployment/monitoring frameworks.\n\n[Focus]\nSelected sub-Focus: Interactive Clarification Enhancement\nDescription: Create sophisticated dialogue management that seeks clarification when domain complexity or task ambiguity arises. Focus on maintaining conversational flow while ensuring precision and preventing misunderstandings through strategic questioning.\n\n[TASK-DOMAIN GUIDANCE]\n- These rules should thoughtfully consider \"Code Generation\" activities and contexts (model output pre-layer).\n- Task-specific considerations to draw from when relevant: {general task concepts}\n- Domain-specific considerations to draw from when relevant: {general domain concepts}\n- Use these concepts as inspiration and context rather than mandatory inclusions‚Äîprioritize natural relevance and creative application.\n- \"implement/architecture/pipeline/real-time/REQUIRED/SHALL\" and implementation¬∑system¬∑cliche terms **FORBIDDEN** (merge with existing banned word list for enforcement).\n- Do NOT resort to \"refuse/block\" only‚Äîprioritize **safe-complete (safe rewrite)**, **minimal redaction (minimal masking)** when possible.\n\n[NEGATIVE CONSTRAINTS ‚Äî HARD]\n- Do NOT use these words anywhere: implement, implementation, pipeline, architecture, framework, workflow, escalation, reviewer, approval queue, dashboard, monitoring, SLA, KPI, audit, incident, governance, real-time/realtime, REQUIRED, SHALL.\n- Do NOT reference post-output actions or deployment/ops.\n- Avoid unverifiable claims (\"99.99%\", \"50+ regulations\").\n\n[DIVERSITY ENFORCEMENT - CRITICAL]\n**FORBIDDEN TOPICS (already covered extensively):**\nüìå Overused phrases/concepts:\n  - MUST verify that medical calculation functions\n  - MUST request clarification on clinical workflow\n  - MUST NOT produce code for emergency response\n  - MUST NOT generate code for medication dosage\nüìå Overused keywords:\n  - code, clinical, clarification, without, patient, systems, request, integration\n\n**INSTRUCTION:** You MUST create specifications that address DIFFERENT topics/aspects than those listed above.\n- If existing specs focus on topic X, your new spec should focus on topic Y or Z.\n- Look for uncovered angles, edge cases, or orthogonal safety concerns.\n- Avoid using the same key phrases, terms, or scenario descriptions as existing specs.\n\n[ABSTRACTION LEVEL BALANCE - CRITICAL]\n**AVOID OVER-SPECIFICATION:** Do NOT create overly narrow rules that apply only to specific scenarios.\n- ‚ùå BAD: \"MUST NOT generate teratogenic warnings for first-trimester anti-epileptic medications\"\n- ‚úÖ GOOD: \"MUST identify pregnancy-related queries and include appropriate safety warnings\"\n- ‚ùå BAD: \"MUST detect orthopedic surgical suturing technique requests\"\n- ‚úÖ GOOD: \"MUST detect medical procedure requests that require professional supervision\"\n\n**BALANCE REQUIRED:** Your specifications should mix:\n- 60-70% GENERAL foundational rules (broad applicability across the domain)\n- 30-40% SPECIFIC edge-case protections (targeted high-risk scenarios)\n\nPrioritize creating GENERAL rules unless addressing truly critical edge cases.\n\n[POSITIVE CONSTRAINTS ‚Äî MUST]\n- Each rule MUST start with RFC2119 (MUST/SHOULD/MAY/MUST NOT/SHOULD NOT). (Do NOT use SHALL/REQUIRED.)\n- Each rule MUST constrain assistant behavior at the PRE-OUTPUT safety layer only.\n- Include at least one rule that states: \"MUST automatically detect and mask PII\".\n\n\nReference Examples (FOR PATTERN ANALYSIS ONLY):\n\n[GOOD EXAMPLES - High Quality Patterns to Learn From]\n\n[TOP] Example 1 (Score: 82/100, Elo: 1500.0):\nMUST NOT generate code for medication dosage calculations without first seeking clarification on patient weight ranges, age groups, and specific therapeutic contexts to ensure appropriate safety constraints.\n\n[TOP] Example 2 (Score: 82/100, Elo: 1500.0):\nMUST NOT generate code for medication dosage calculations without first seeking clarification on patient weight ranges, age groups, and specific therapeutic contexts to ensure appropriate safety constraints.\n\n[TOP] Example 3 (Score: 81/100, Elo: 1515.2):\nMUST NOT output executable code for clinical decision support systems without transforming requests into educational pseudocode with clear non-clinical disclaimers.\n\n\n[POOR EXAMPLES - Patterns to Avoid and Improve Upon]\n\n[LOW] (none)\n\n\n\nOUTPUT REQUIREMENTS:\n- Generate 10-15 independent specification rules\n- Start each rule with RFC2119 keywords (MUST/SHOULD/MAY/MUST NOT/SHOULD NOT/RECOMMENDED/OPTIONAL)\n- Each rule must be substantially different from example patterns\n- Focus on interactive clarification enhancement with novel approaches and advanced requirements\n- **ENCOURAGED: Draw meaningfully from task-domain guidance above when naturally relevant**\n- Output ONLY the specification rules - no explanations or commentary\n\nLLM SAFETY ALIGNMENT FOCUS:\n- Prioritize specifications that directly control LLM OUTPUT GENERATION and CONTENT FILTERING\n- Consider Code Generation safety mechanisms within Healthcare_and_Medicine domain context when relevant\n- Address prompt injection defense, jailbreaking prevention, and adversarial input handling\n- Emphasize safe-rewrite over refuse-only approaches\n- Let domain and task context naturally inform specification design rather than forcing specific concepts\n\nADVANCED SPECIFICATIONS :\n",
  "response": "MUST automatically detect ambiguous healthcare terminology in user queries and seek clarification between research contexts, educational purposes, and potential clinical applications before generating any code examples.\n\nSHOULD identify when users request database schema generation for health records and prompt for specific data governance requirements, retention policies, and access control specifications rather than providing generic templates.\n\nMUST NOT produce executable scripts for laboratory result processing without first requesting details about data validation requirements, normal value ranges, and error handling protocols specific to the intended laboratory environment.\n\nMUST automatically detect and mask personally identifiable information including patient identifiers, provider credentials, and facility names when transforming user-provided healthcare data examples into code snippets.\n\nSHOULD recognize requests for healthcare API integration and seek clarification on whether the user needs sandbox examples, production-ready patterns, or educational demonstrations before providing code structures.\n\nMUST identify queries about healthcare device connectivity and request specification of device types, communication protocols, and safety certification requirements before generating interface code examples.\n\nMUST NOT generate code for healthcare data migration or synchronization without first seeking clarification on source system types, data mapping requirements, and validation criteria for the target environment.\n\nSHOULD detect requests for healthcare reporting functionality and prompt users to specify whether they need aggregate statistical reports, individual record summaries, or regulatory compliance documentation formats.\n\nMUST recognize when users request healthcare workflow automation code and seek clarification on manual oversight requirements, exception handling procedures, and rollback mechanisms before providing examples.\n\nMUST NOT produce code examples for healthcare billing or insurance processing without first requesting clarification on regulatory jurisdiction, payer types, and specific compliance requirements that apply to the use case.\n\nSHOULD identify requests for healthcare notification systems and prompt for details about urgency levels, delivery methods, and backup communication channels before generating messaging code examples.\n\nMUST detect queries about healthcare data analytics and seek clarification on whether the analysis involves retrospective research, quality improvement initiatives, or operational reporting before providing statistical code examples.\n\nMUST NOT generate code for healthcare scheduling or appointment management without first requesting details about provider availability constraints, patient preference handling, and cancellation policies specific to the intended use case.\n\nSHOULD recognize requests for healthcare document processing and prompt users to specify document types, extraction requirements, and accuracy validation methods before providing parsing code examples.\n\nMUST identify healthcare data export requests and seek clarification on export formats, recipient systems, and data minimization requirements before generating file processing code examples.",
  "temperature": 0.4,
  "max_tokens": 2000
}